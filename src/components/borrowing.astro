<div class="flex w-[700px] h-[90px] mx-auto">
    <h1>Borrow Assets</h1>
  </div>
  
  <div class="flex shadow-xl bg-white w-[700px] h-[90px] mx-auto my-2 rounded-2xl px-5 py-3 justify-between ">
    <div class="flex w-[55px] items-center justify-center">
      <img src="/Stellar_Symbol.png" alt="Stellar lumens logo" width="50">
    </div>
  
    <div class="w-[120px]">
      <strong> Stellar Lumens</strong>
      <p>XLM</p>
    </div>
  
    <div class="w-[110px]">
      <p>Total available </p>
      <strong id="current-liquid" aria-live="polite">???</strong>
      <p>$30.82</p>
    </div>
  
    <div>
      <p>Borrow APY </p>
      <strong>1.45%</strong>
    </div>
    
    <button data-increment aria-controls="current-liquid">Deposit collateral</button>
    <button data-decrement aria-controls="current-liquid">Borrow</button>

  </div>
  
  <div class="relative flex shadow-xl bg-white w-[700px] h-[90px] mx-auto my-2 rounded-2xl px-5 py-3 justify-between">
    <div class="flex w-[55px] items-center justify-center">
      <img src="/usdc.svg" alt="USD Coin logo">
    </div>
    <div class="w-[120px]">
      <strong> USD Coin</strong>
      <p>USDC</p>
    </div>
  
    <div class="w-[110px]">
      <p>Total available </p>
      <strong>5.82M</strong>
      <p>$5.82M</p>
    </div>
  
    <div>
      <p>Borrow APY </p>
      <strong>12.34%</strong>
    </div>
    
    <button data-increment aria-controls="current-liquid">Borrow</button>
    
  </div>
  
  <script>
  import loan_pool from "../contracts/loan_pool";
      import { isAllowed, getPublicKey, signTransaction} from '@stellar/freighter-api';
      const button_deposit = document.querySelector("[data-increment]") as HTMLButtonElement;
      const button_borrow = document.querySelector("[data-decrement") as HTMLButtonElement;
      const currentValue = document.querySelector("#current-liquid");
      if (await isAllowed()) {
        const publicKey = await getPublicKey();
        if (publicKey) loan_pool.options.publicKey = publicKey;
      }
  
  
      let promise = loan_pool.get_contract_balance();
      console.log(promise);
      promise.then((result: any) => {
        const simulationValue = result.simulation.result.retval._value._attributes.lo._value; // FIXME: Property does not exist on type when it actually does.
        console.log(simulationValue);
        currentValue!.innerHTML = (simulationValue / BigInt(10000000)).toString();
      }).catch(error => {
        console.error("Promise rejected with error:", error);
      })
  
  
      async function depositCollateralToLoanPool() {
          try {
            const adrs = await getPublicKey();
            console.log(adrs)
            console.log(adrs)
            const depo = { user: adrs, amount: BigInt(1000000000) };
  
            const tx = await loan_pool.deposit_collateral(depo);
            const { result } = await tx.signAndSend({ signTransaction });
  
            console.log(result);
          } catch (error) {
            console.error("An error occurred:", error);
          }
        }

        async function borrowFromLoanPool() {
          try {
            const adrs = await getPublicKey();
            console.log(adrs)
            console.log(adrs)
            const depo = { user: adrs, amount: BigInt(1000000000) };
  
            const tx = await loan_pool.borrow(depo);
            const { result } = await tx.signAndSend({ signTransaction });
  
            console.log(result);
          } catch (error) {
            console.error("An error occurred:", error);
          }
        }
  
  
      button_deposit.addEventListener("click", async () => {
        button_deposit.disabled = true;
        button_deposit.classList.add("loading");
  
        // Ensure that getPublicKey and signTransaction are defined and available
        // Call the async function
        depositCollateralToLoanPool();
    
        button_deposit.disabled = false;
        button_deposit.classList.remove("loading");
      });

      button_borrow.addEventListener("click", async () => {
        button_borrow.disabled = true;
        button_borrow.classList.add("loading");
  
        // Ensure that getPublicKey and signTransaction are defined and available
        // Call the async function
        borrowFromLoanPool();
    
        button_borrow.disabled = false;
        button_borrow.classList.remove("loading");
      });
    
    </script>
  
  <style>
      main {
          margin: auto;
          padding: 1rem;
          width: 800px;
          max-width: calc(100% - 2rem);
          color: rgb(0, 0, 0);
          font-size: 20px;
          line-height: 1.6;
      }
      .astro-a {
          position: absolute;
          top: -32px;
          left: 50%;
          transform: translatex(-50%);
          width: 220px;
          height: auto;
          z-index: -1;
      }
      h1 {
          font-size: 4rem;
          font-weight: 700;
          line-height: 1;
          text-align: center;
          margin-bottom: 1em;
      }
      .text-gradient {
          background-image: var(--accent-gradient);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-size: 400%;
          background-position: 0%;
      }
      .instructions {
          margin-bottom: 2rem;
          border: 1px solid rgba(var(--accent-light), 25%);
          background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
          padding: 1.5rem;
          border-radius: 8px;
      }
      .instructions code {
          font-size: 0.8em;
          font-weight: bold;
          background: rgba(var(--accent-light), 12%);
          color: rgb(var(--accent-light));
          border-radius: 4px;
          padding: 0.3em 0.4em;
      }
      .instructions strong {
          color: rgb(var(--accent-light));
      }
      .link-card-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
          gap: 2rem;
          padding: 0;
      }
  </style>
  