<strong> Loan Pool</strong><br />
Current liquidity: <strong id="current-liquid" aria-live="polite">???</strong><br />
<br />
<button data-increment aria-controls="current-liquid">Deposit</button>
<button data-decrement aria-controls="current">Withdraw</button>

<script>
import loan_pool from "../contracts/loan_pool";
    import { isAllowed, getPublicKey, signTransaction} from '@stellar/freighter-api';
    const button_deposit = document.querySelector("[data-increment]");
    const button_withdraw = document.querySelector("[data-decrement]")
    const currentValue = document.querySelector("#current-liquid");
    if (await isAllowed()) {
      const publicKey = await getPublicKey();
      if (publicKey) loan_pool.options.publicKey = publicKey;
    }


    let promise = loan_pool.get_contract_balance();
    console.log(promise);
    promise.then(result => {
      const simulationValue = result.simulation.result.retval._value._attributes.lo._value;
      console.log(simulationValue);
      currentValue.innerHTML = (simulationValue / BigInt(10000000)).toString();
    }).catch(error => {
      console.error("Promise rejected with error:", error);
    })


    async function depositToLoanPool() {
        try {
          const adrs = await getPublicKey();
          console.log(adrs)
          console.log(adrs)
          const depo = { user: adrs, amount: BigInt(1000000000) };

          const tx = await loan_pool.deposit(depo);
          const { result } = await tx.signAndSend({ signTransaction });

          console.log(result);
        } catch (error) {
          console.error("An error occurred:", error);
        }
      }

      async function withdrawFromLoanPool() {
        try {
          const adrs = await getPublicKey();
          console.log(adrs)
          const depo = { user: adrs, amount: BigInt(1000000000) };

          const tx = await loan_pool.withdraw(depo);
          const { result } = await tx.signAndSend({ signTransaction });

          console.log(result);
        } catch (error) {
          console.error("An error occurred:", error);
        }
      }


    button_deposit.addEventListener("click", async () => {
      button_deposit.disabled = true;
      button_deposit.classList.add("loading");

      // Ensure that getPublicKey and signTransaction are defined and available
      // Call the async function
      depositToLoanPool();
  
      button_deposit.disabled = false;
      button_deposit.classList.remove("loading");
    });


    button_withdraw.addEventListener("click", async () => {
      button_withdraw.disabled = true;
      button_withdraw.classList.add("loading");

      // Ensure that getPublicKey and signTransaction are defined and available
      // Call the async function
      withdrawFromLoanPool();
  
      button_withdraw.disabled = false;
      button_withdraw.classList.remove("loading");
    });    
  </script>