<div class="flex w-[700px] h-[90px] mx-auto">
  <h1>Lend Assets</h1>
</div>

<div class="flex shadow-xl bg-white w-[700px] h-[90px] mx-auto my-2 rounded-2xl px-5 py-3 justify-between">
  <div class="flex w-[55px] items-center justify-center">
    <img src="/Stellar_Symbol.png" alt="Stellar lumens logo" width="50" />
  </div>

  <div class="w-[120px]">
    <strong> Stellar Lumens</strong>
    <p>XLM</p>
  </div>

  <div class="w-[110px]">
    <p>Total supplied</p>
    <strong id="current-liquid" aria-live="polite">???</strong>
    <p>$30.82</p>
  </div>

  <div>
    <p>Supply APY</p>
    <strong>1.45%</strong>
  </div>

  <button xlm-deposit aria-controls="current-liquid">Deposit</button>
  <button xlm-withdraw aria-controls="current">Withdraw</button>
</div>

<div class="relative flex shadow-xl bg-white w-[700px] h-[90px] mx-auto my-2 rounded-2xl px-5 py-3 justify-between">
  <div class="flex w-[55px] items-center justify-center">
    <img src="/usdc.svg" alt="USD Coin logo" />
  </div>
  <div class="w-[120px]">
    <strong> USD Coin</strong>
    <p>USDC</p>
  </div>

  <div class="w-[110px]">
    <p>Total supplied</p>
    <strong id="current-liquid-usdc" aria-live="polite">???</strong>
    <p>$5.82M</p>
  </div>

  <div>
    <p>Supply APY</p>
    <strong>12.34%</strong>
  </div>

  <button usdc-deposit aria-controls="current-liquid-usdc">Deposit</button>
  <button usdc-withdraw aria-controls="current">Withdraw</button>
</div>

<script>
  import loan_pool from '../contracts/loan_pool';
  import usdc_pool from '../contracts/usdc_pool';
  import { isAllowed, getPublicKey, signTransaction } from '@stellar/freighter-api';

  const xlm_button_deposit = document.querySelector('[xlm-deposit]') as HTMLButtonElement;
  const xlm_button_withdraw = document.querySelector('[xlm-withdraw]') as HTMLButtonElement;
  const usdc_button_deposit = document.querySelector('[usdc-deposit]') as HTMLButtonElement;
  const usdc_button_withdraw = document.querySelector('[usdc-withdraw]') as HTMLButtonElement;

  const currentValue = document.querySelector('#current-liquid');
  const currentValueUsdc = document.querySelector('#current-liquid-usdc');

  if (await isAllowed()) {
    const publicKey = await getPublicKey();
    if (publicKey) {
      loan_pool.options.publicKey = publicKey;
      usdc_pool.options.publicKey = publicKey;
    }
  }

  function update_xlm_deposited() {
    let promise = loan_pool.get_contract_balance();
    console.log(promise);
    promise
      .then((result: any) => {
        if (result.simulation) {
          const simulationValue = result.simulation.result.retval._value._attributes.lo._value; // FIXME: Property does not exist on type when it actually does.
          console.log(simulationValue);
          currentValue!.innerHTML = (simulationValue / BigInt(10000000)).toString(); // FIXME: Proper bigInt value handling, related to fixme before.
        } else {
          // Handle the case where result.simulation is undefined
          console.error('Simulation result is undefined');
        }
      })
      .catch((error) => {
        console.error('Promise rejected with error:', error);
      });
  }

  update_xlm_deposited();

  function update_usdc_deposited() {
    let promise_usdc = usdc_pool.get_contract_balance();
    console.log(promise_usdc);
    promise_usdc
      .then((result: any) => {
        if (result.simulation) {
          const simulationValue = result.simulation.result.retval._value._attributes.lo._value; // FIXME: Property does not exist on type when it actually does.
          console.log(simulationValue);
          currentValueUsdc!.innerHTML = (simulationValue / BigInt(10000000)).toString(); // FIXME: Proper bigInt value handling, related to fixme before.
        } else {
          // Handle the case where result.simulation is undefined
          console.error('Simulation result is undefined');
        }
      })
      .catch((error) => {
        console.error('Promise rejected with error:', error);
      });
  }

  update_usdc_deposited();

  async function depositToLoanPool() {
    try {
      const adrs = await getPublicKey();
      console.log(adrs);
      console.log(adrs);
      const depo = { user: adrs, amount: BigInt(1000000000) };

      const tx = await loan_pool.deposit(depo);
      const { result } = await tx.signAndSend({ signTransaction });

      console.log(result);
    } catch (error) {
      console.error('An error occurred:', error);
    }
  }

  async function withdrawFromLoanPool() {
    try {
      const adrs = await getPublicKey();
      console.log(adrs);
      const depo = { user: adrs, amount: BigInt(1000000000) };

      const tx = await loan_pool.withdraw(depo);
      const { result } = await tx.signAndSend({ signTransaction });

      console.log(result);
    } catch (error) {
      console.error('An error occurred:', error);
    }
  }

  // TODO: This should be done so that there is no separatate function for each of the pools, but for now it'll do
  async function depositToUsdcPool() {
    try {
      const adrs = await getPublicKey();
      console.log(adrs);
      console.log(adrs);
      const depo = { user: adrs, amount: BigInt(100000000) };

      const tx = await usdc_pool.deposit(depo);
      const { result } = await tx.signAndSend({ signTransaction });

      console.log(result);
    } catch (error) {
      console.error('An error occurred:', error);
    }
  }

  async function withdrawFromUsdcPool() {
    try {
      const adrs = await getPublicKey();
      console.log(adrs);
      const depo = { user: adrs, amount: BigInt(100000000) };

      const tx = await usdc_pool.withdraw(depo);
      const { result } = await tx.signAndSend({ signTransaction });

      console.log(result);
    } catch (error) {
      console.error('An error occurred:', error);
    }
  }

  xlm_button_deposit.addEventListener('click', async () => {
    xlm_button_deposit.disabled = true;
    xlm_button_deposit.classList.add('loading');

    // Ensure that getPublicKey and signTransaction are defined and available
    // Call the async function
    depositToLoanPool();

    xlm_button_deposit.disabled = false;
    xlm_button_deposit.classList.remove('loading');
    update_xlm_deposited();
  });

  xlm_button_withdraw.addEventListener('click', async () => {
    xlm_button_withdraw.disabled = true;
    xlm_button_withdraw.classList.add('loading');

    // Ensure that getPublicKey and signTransaction are defined and available
    // Call the async function
    withdrawFromLoanPool();

    xlm_button_withdraw!.disabled = false;
    xlm_button_withdraw!.classList.remove('loading');
  });

  usdc_button_deposit.addEventListener('click', async () => {
    usdc_button_deposit.disabled = true;
    usdc_button_deposit.classList.add('loading');

    // Ensure that getPublicKey and signTransaction are defined and available
    // Call the async function
    depositToUsdcPool();

    usdc_button_deposit.disabled = false;
    usdc_button_deposit.classList.remove('loading');
  });

  usdc_button_withdraw.addEventListener('click', async () => {
    usdc_button_withdraw.disabled = true;
    usdc_button_withdraw.classList.add('loading');

    // Ensure that getPublicKey and signTransaction are defined and available
    // Call the async function
    withdrawFromUsdcPool();

    usdc_button_withdraw.disabled = false;
    usdc_button_withdraw.classList.remove('loading');
  });
</script>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: rgb(0, 0, 0);
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
